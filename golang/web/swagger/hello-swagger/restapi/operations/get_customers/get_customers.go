// Code generated by go-swagger; DO NOT EDIT.

package get_customers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCustomersHandlerFunc turns a function with the right signature into a get customers handler
type GetCustomersHandlerFunc func(GetCustomersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCustomersHandlerFunc) Handle(params GetCustomersParams) middleware.Responder {
	return fn(params)
}

// GetCustomersHandler interface for that can handle valid get customers params
type GetCustomersHandler interface {
	Handle(GetCustomersParams) middleware.Responder
}

// NewGetCustomers creates a new http.Handler for the get customers operation
func NewGetCustomers(ctx *middleware.Context, handler GetCustomersHandler) *GetCustomers {
	return &GetCustomers{Context: ctx, Handler: handler}
}

/*GetCustomers swagger:route GET /customer getCustomers getCustomers

customer to be found

*/
type GetCustomers struct {
	Context *middleware.Context
	Handler GetCustomersHandler
}

func (o *GetCustomers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetCustomersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
