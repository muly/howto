// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customer customer
// swagger:model customer
type Customer struct {

	// email
	// Required: true
	// Pattern: [a-z0-9._%+-]+@[a-z0-9.-]+\.com$
	// Format: email
	Email *strfmt.Email `json:"email"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	// Required: true
	// Enum: [Active Deleted Inactive]
	Status *string `json:"status"`
}

// Validate validates this customer
func (m *Customer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customer) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.Pattern("email", "body", string(*m.Email), `[a-z0-9._%+-]+@[a-z0-9.-]+\.com$`); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Customer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var customerTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Deleted","Inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeStatusPropEnum = append(customerTypeStatusPropEnum, v)
	}
}

const (

	// CustomerStatusActive captures enum value "Active"
	CustomerStatusActive string = "Active"

	// CustomerStatusDeleted captures enum value "Deleted"
	CustomerStatusDeleted string = "Deleted"

	// CustomerStatusInactive captures enum value "Inactive"
	CustomerStatusInactive string = "Inactive"
)

// prop value enum
func (m *Customer) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, customerTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Customer) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customer) UnmarshalBinary(b []byte) error {
	var res Customer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
